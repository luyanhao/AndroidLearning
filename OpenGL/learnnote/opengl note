
1.OpenGL把3D坐标转变为屏幕的2D像素。by 图形渲染管线（Graphics Pipeline）
    1.3D坐标 => 2D坐标，
    2. 2D坐标 => 有颜色的像素。

2. 2D坐标 vs 2D像素
    1. 2D坐标精确表示一个点在2D空间中的位置；
    2. 2D像素是这个点的近似值，受屏幕/窗口分辨率的限制。

3. 流程
    1. 顶点数据：vertex data[]
    2. 顶点着色器：vertex shader;转换坐标系
    3、图元装配：Primitive Assemblely, 顶点着色器的输出的所有顶点作为输入。并指定图元的形状如点、三角形、线GL_POINTS、GL_TRIANGLES、GL_LINE_STRIP；
    4、几何着色器：Geometry Shader, 可以通过产生新顶点构造出新的图元来生成其他形状。
    5、光栅化：Rasterization Stage，映射为最终屏幕上像素，生成供片段着色器(Fragment Shader)使用的片段(Fragment)。
        5.1: OpenGL中的一个片段是OpenGL渲染一个像素所需的所有数据
    6、片段着色器：Fragment Shader 计算片段的颜色
    7、Blending

3. 顶点缓冲对象 Vertex Buffer Objects (com.scott.opengl.data.VertexBuffer)
    1、顶点着色器。在GPU上创建内存用于储存顶点数据，并指定其如何发送给显卡。
    2、VBO管理这个内存；可以一次性的发送一大批数据到显卡上
    3、顶点缓冲对象的缓冲类型是：GL_ARRAY_BUFFER
    4、如何管理：
        GL_STATIC_DRAW ：数据不会或几乎不会改变。
        GL_DYNAMIC_DRAW：数据会被改变很多。
        GL_STREAM_DRAW ：数据每次绘制时都会改变。

4. 纹理(texture)
    坐标：[0,1]。texture和sampling
    环绕方式:
        GL_REPEAT:对纹理的默认行为。重复纹理图像。
        GL_MIRRORED_REPEAT:和GL_REPEAT一样，但每次重复图片是镜像放置的。
        GL_CLAMP_TO_EDGE:纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。
        GL_CLAMP_TO_BORDER:超出的坐标为用户指定的边缘颜色。
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);
    纹理坐标不依赖于分辨率(Resolution)，它可以是任意浮点值
    纹理过滤
        GL_NEAREST：产生了颗粒状的图案
        GL_LINEAR：产生更平滑的图案
        当进行放大(Magnify)和缩小(Minify)操作的时候可以设置纹理过滤的选项
    多级渐进纹理
        glGenerateMipmaps
        GL_NEAREST_MIPMAP_NEAREST   使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样
        GL_LINEAR_MIPMAP_NEAREST	使用最邻近的多级渐远纹理级别，并使用线性插值进行采样
        GL_NEAREST_MIPMAP_LINEAR	在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样
        GL_LINEAR_MIPMAP_LINEAR	    在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样
    使用glUniform1i，我们可以给纹理采样器分配一个位置值
    纹理上下颠倒：因为opengl图片的坐标原点是左下角。图片的原点是从左上角开始的。

5. 光照 Lighting
    看到某一物体的颜色并不是这个物体真正拥有的颜色，而是它所反射的(Reflected)颜色